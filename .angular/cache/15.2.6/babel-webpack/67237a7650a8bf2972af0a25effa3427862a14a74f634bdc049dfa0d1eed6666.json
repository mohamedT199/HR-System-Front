{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from \"../environment/environment\";\nimport { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n    }\n    login(email, password) {\n      let body = {\n        \"email\": email,\n        \"password\": password\n      };\n      this.http.post(environment.apiUrl + \"login\", body, {\n        responseType: 'text'\n      }).pipe(catchError(error => {\n        localStorage.clear();\n        console.log(localStorage.length);\n        console.log(\"from Error\");\n        return throwError('Token Not Found');\n      })).subscribe(response => {\n        localStorage.setItem(\"token\", 'Bearer ' + response);\n        this.router.navigate(['/home']);\n      });\n      if (localStorage.length >= 1) return true;else return false;\n    }\n    getTheEndOfTheToken() {\n      if (localStorage.getItem('token')) {\n        let httpOptions = {\n          headers: new HttpHeaders({\n            'Authorization': 'Bearer ' + localStorage.getItem('token')\n          })\n        };\n        return this.http.get(environment.apiUrl + 'gettokendate', httpOptions);\n      }\n      return null;\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}